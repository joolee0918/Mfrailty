// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// EU_cal
NumericMatrix EU_cal(NumericVector cumsum1, NumericVector cumsum2, NumericVector dc, NumericVector ww1, NumericVector ww2, NumericVector vv1, NumericVector vv2, int nsample, int N, IntegerVector n1, IntegerVector n2, bool parallel, int ncore);
RcppExport SEXP _Mfrailty_EU_cal(SEXP cumsum1SEXP, SEXP cumsum2SEXP, SEXP dcSEXP, SEXP ww1SEXP, SEXP ww2SEXP, SEXP vv1SEXP, SEXP vv2SEXP, SEXP nsampleSEXP, SEXP NSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP parallelSEXP, SEXP ncoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type cumsum1(cumsum1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cumsum2(cumsum2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ww1(ww1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ww2(ww2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vv1(vv1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vv2(vv2SEXP);
    Rcpp::traits::input_parameter< int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type ncore(ncoreSEXP);
    rcpp_result_gen = Rcpp::wrap(EU_cal(cumsum1, cumsum2, dc, ww1, ww2, vv1, vv2, nsample, N, n1, n2, parallel, ncore));
    return rcpp_result_gen;
END_RCPP
}
// Ef_cal
double Ef_cal(NumericVector f, NumericVector cumsum1, NumericVector cumsum2, NumericVector dc, NumericVector ww1, NumericVector ww2, NumericVector vv1, NumericVector vv2, int nsample, int N, IntegerVector n1, IntegerVector n2, bool parallel, int ncore);
RcppExport SEXP _Mfrailty_Ef_cal(SEXP fSEXP, SEXP cumsum1SEXP, SEXP cumsum2SEXP, SEXP dcSEXP, SEXP ww1SEXP, SEXP ww2SEXP, SEXP vv1SEXP, SEXP vv2SEXP, SEXP nsampleSEXP, SEXP NSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP parallelSEXP, SEXP ncoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cumsum1(cumsum1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cumsum2(cumsum2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ww1(ww1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ww2(ww2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vv1(vv1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vv2(vv2SEXP);
    Rcpp::traits::input_parameter< int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type ncore(ncoreSEXP);
    rcpp_result_gen = Rcpp::wrap(Ef_cal(f, cumsum1, cumsum2, dc, ww1, ww2, vv1, vv2, nsample, N, n1, n2, parallel, ncore));
    return rcpp_result_gen;
END_RCPP
}
// Ef1f2_cal
NumericVector Ef1f2_cal(NumericVector f1, NumericVector f2, NumericVector cumsum1, NumericVector cumsum2, NumericVector dc, NumericVector ww1, NumericVector ww2, NumericVector vv1, NumericVector vv2, int nsample, int N, IntegerVector n1, IntegerVector n2, bool parallel, int ncore);
RcppExport SEXP _Mfrailty_Ef1f2_cal(SEXP f1SEXP, SEXP f2SEXP, SEXP cumsum1SEXP, SEXP cumsum2SEXP, SEXP dcSEXP, SEXP ww1SEXP, SEXP ww2SEXP, SEXP vv1SEXP, SEXP vv2SEXP, SEXP nsampleSEXP, SEXP NSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP parallelSEXP, SEXP ncoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type f1(f1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f2(f2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cumsum1(cumsum1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cumsum2(cumsum2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ww1(ww1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ww2(ww2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vv1(vv1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vv2(vv2SEXP);
    Rcpp::traits::input_parameter< int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type ncore(ncoreSEXP);
    rcpp_result_gen = Rcpp::wrap(Ef1f2_cal(f1, f2, cumsum1, cumsum2, dc, ww1, ww2, vv1, vv2, nsample, N, n1, n2, parallel, ncore));
    return rcpp_result_gen;
END_RCPP
}
// ObslogL
NumericVector ObslogL(NumericVector haz1, NumericVector haz2, NumericVector cumsum1, NumericVector cumsum2, NumericVector dc, NumericVector ww1, NumericVector ww2, NumericVector vv1, NumericVector vv2, int nsample, int N, IntegerVector n1, IntegerVector n2, bool parallel, int ncore);
RcppExport SEXP _Mfrailty_ObslogL(SEXP haz1SEXP, SEXP haz2SEXP, SEXP cumsum1SEXP, SEXP cumsum2SEXP, SEXP dcSEXP, SEXP ww1SEXP, SEXP ww2SEXP, SEXP vv1SEXP, SEXP vv2SEXP, SEXP nsampleSEXP, SEXP NSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP parallelSEXP, SEXP ncoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type haz1(haz1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type haz2(haz2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cumsum1(cumsum1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cumsum2(cumsum2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ww1(ww1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ww2(ww2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vv1(vv1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vv2(vv2SEXP);
    Rcpp::traits::input_parameter< int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type ncore(ncoreSEXP);
    rcpp_result_gen = Rcpp::wrap(ObslogL(haz1, haz2, cumsum1, cumsum2, dc, ww1, ww2, vv1, vv2, nsample, N, n1, n2, parallel, ncore));
    return rcpp_result_gen;
END_RCPP
}
// EU_cal_ts
NumericVector EU_cal_ts(NumericVector cumsum, double sig2, int margins, NumericVector w, NumericVector v, int nsample, int N, NumericVector n, bool parallel, int ncore);
RcppExport SEXP _Mfrailty_EU_cal_ts(SEXP cumsumSEXP, SEXP sig2SEXP, SEXP marginsSEXP, SEXP wSEXP, SEXP vSEXP, SEXP nsampleSEXP, SEXP NSEXP, SEXP nSEXP, SEXP parallelSEXP, SEXP ncoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type cumsum(cumsumSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< int >::type margins(marginsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type ncore(ncoreSEXP);
    rcpp_result_gen = Rcpp::wrap(EU_cal_ts(cumsum, sig2, margins, w, v, nsample, N, n, parallel, ncore));
    return rcpp_result_gen;
END_RCPP
}
// Ef_cal_ts
double Ef_cal_ts(NumericVector f, NumericVector cumsum, double sig2, int margins, NumericVector w, NumericVector v, int nsample, int N, NumericVector n, bool parallel, int ncore);
RcppExport SEXP _Mfrailty_Ef_cal_ts(SEXP fSEXP, SEXP cumsumSEXP, SEXP sig2SEXP, SEXP marginsSEXP, SEXP wSEXP, SEXP vSEXP, SEXP nsampleSEXP, SEXP NSEXP, SEXP nSEXP, SEXP parallelSEXP, SEXP ncoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cumsum(cumsumSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< int >::type margins(marginsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type ncore(ncoreSEXP);
    rcpp_result_gen = Rcpp::wrap(Ef_cal_ts(f, cumsum, sig2, margins, w, v, nsample, N, n, parallel, ncore));
    return rcpp_result_gen;
END_RCPP
}
// ObslogL_ts
NumericVector ObslogL_ts(NumericVector haz, NumericVector cumsum, double sig2, int margins, NumericVector w, NumericVector v, int nsample, int N, NumericVector n, bool parallel, int ncore);
RcppExport SEXP _Mfrailty_ObslogL_ts(SEXP hazSEXP, SEXP cumsumSEXP, SEXP sig2SEXP, SEXP marginsSEXP, SEXP wSEXP, SEXP vSEXP, SEXP nsampleSEXP, SEXP NSEXP, SEXP nSEXP, SEXP parallelSEXP, SEXP ncoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type haz(hazSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cumsum(cumsumSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< int >::type margins(marginsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type ncore(ncoreSEXP);
    rcpp_result_gen = Rcpp::wrap(ObslogL_ts(haz, cumsum, sig2, margins, w, v, nsample, N, n, parallel, ncore));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Mfrailty_EU_cal", (DL_FUNC) &_Mfrailty_EU_cal, 13},
    {"_Mfrailty_Ef_cal", (DL_FUNC) &_Mfrailty_Ef_cal, 14},
    {"_Mfrailty_Ef1f2_cal", (DL_FUNC) &_Mfrailty_Ef1f2_cal, 15},
    {"_Mfrailty_ObslogL", (DL_FUNC) &_Mfrailty_ObslogL, 15},
    {"_Mfrailty_EU_cal_ts", (DL_FUNC) &_Mfrailty_EU_cal_ts, 10},
    {"_Mfrailty_Ef_cal_ts", (DL_FUNC) &_Mfrailty_Ef_cal_ts, 11},
    {"_Mfrailty_ObslogL_ts", (DL_FUNC) &_Mfrailty_ObslogL_ts, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_Mfrailty(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
